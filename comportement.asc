//---------------------------------------------------------------------------------
[[behavior]]
== Le comportement du système
//---------------------------------------------------------------------------------

ifndef::book[]

[cols="h,4*",options="header",width="50%"]
|======================
|					| {Requirements} 	| {Structure}	| [red]*{Behavior}* 	| {Crosscutting}
| {organisation}	|					|        		|				|
| {analysis}		|					|        		|				|
| {design}			|					|        		|				|
| {implementation}	|					|        		|				|
|======================

endif::book[]

ifdef::slides[]
:leveloffset: -1
endif::slides[]

=== Fondements

On abordera :

- les _Use Case Diagrams_
- les _Sequence Diagrams_
- les _State Machines_
- les _Activity Diagrams_

[[usecase]]
=== _Use Case Diagrams_

Les éléments de base :

Acteurs::
	Les principaux éléments extérieurs au système considéré, et participant qui participent (on parle parfois d'acteurs principaux). Ils ont souvent un rôle.
	ou qui bénéficient (on parle alors d'acteurs secondaires) du système.
Cas d'utilisation::
	représente un ensemble d’actions réalisées par le système intéressant pour au moins un acteur
Association::
	participation d'un acteur à un cas d'utilisation.
Sujet::
	le domaine étudié (qui peut être une partie seulement de tout le système, pas forcément modélisé dans son ensemble)

[TIP]
====
Un *acteur* représente un *rôle* joué par un utilisateur humain. Il faut donc plutôt raisonner sur les rôles que sur les personnes elles-mêmes pour identifier les acteurs.
====

=== Le Diagramme des Cas d’Utilisation

Le *Diagramme des Cas d'Utilisation* est un diagramme {UML} permettant de représenter :

- les *UC* (_Use Case_ ou Cas d’Utilisation)
- les *acteurs* (principaux et secondaires)
- les *relations*
* entre acteurs et _Use Case_
* entre _Use Cases_

ifdef::slides[]
:leveloffset: -2
endif::slides[]

==== Cas d'Utilisation (_Use Case_)

.Exemple de cas d'utilisation
include::{defs}/uc.txt[]

ifdef::slides[]
image::uc7.png[width="40%"]
image::uc3.png[width="40%"]
endif::slides[]
image::uc4.png[width="80%"]

==== Exemple de cas d'utilisation (UML)

Retrait par carte bancaire

Scénario principal::
	L'UC démarre lorsque le Guichet Automatique Bancaire (GAB) demande au client son numéro confidentiel après l’introduction de sa CB. Le client
	entre son code et valide son entrée. Le GAB contrôle la validité du code. Si le code est valide, le GAB autorise
	le retrait et l’UC se termine.
Scénario alternatif n°1 ::
	Le client peut à tout instant annuler l'opération. La carte est éjectée et l'UC se termine.
Exemple de codification de l'UC::
	UC01 ou RetraitCB (pour Retrait par carte bleue)

==== Précisions

Un cas d'utilisation peut être précisé par :

- une description textuelle
- un ou des diagrammes {UML} (séquence, activité)

[NOTE]
=====================================================================
Dans les outils, cette "précision" se manifeste par le fait que l'on "attache"
généralement un diagramme de séquence à un cas d'utilisation (clic droit sur un _Use Case_ -> nouveau `{seq}`).
=====================================================================

==== Acteur

include::{defs}/acteur.txt[]

On peut trouver plusieurs types d'acteurs :

* extérieurs au système (cf. +actor+ <<ucdiag>>)
** les acteurs principaux
** les acteurs secondaires
* exemples de types d'acteurs prédéfinis dans UML :
** +\<<utility>>+
** +\<<process>>+
** +\<<thread>>+

[NOTE]
====
On peut utiliser des liens de généralisation/spécialisation entre acteurs
pour représenter les possibilités pour le spécialisé d'avoir les mêmes
prérogatives (notamment en terme d'utilisation du système) que le généralisé.
====

==== Relations entre acteurs et _Use Case_

En général, une simple association relie acteurs et _Use Case_.
On peut également orienter ces associations en plaçant une direction (flèche vide) au bout de l'association.

.Relations orientées
image::uc5.png[]

==== Relations entre _Use Case_

Après avoir lister les cas d'utilisation, il est utile de les organiser et de montrer les relations entre eux.
Plusieurs relations sont possibles :

Extension (+\<<extend>>+)::
	Indique que le _Use Case_ source est *éventuellement* exécutée en complément du _Use Case_ destination (cas particulier, erreur...). Le point précis où l'extension peut se produire est appelé _extension point_ (surtout utile quand il existe plusieurs extensions pour un même cas)
Inclusion (+\<<include>>+)::
	Indique que le _Use Case_ est inclus *obligatoirement* dans un autre _Use Case_ (notion de sous-fonction par exemple)
Généralisation::
	Relation entre un _Use Case_ général et un autre plus spécialisé qui hérite de ses caractéristiques et en rajoute (différents modes d'utilisation d'un système par exemple, ou encore différents acteurs impliqués)

//ifdef::slides[<<<]

[[ucdiag]]
.Notation dans le diagramme d'UC
ifdef::book[image::UC.png[scale=80]]
ifndef::book[image::UC.png["Diagramme d'UC",width="35%"]]

[TIP]
=====================================================================
On n'utilise généralement `+<<include>>+` que dans le cas où le sous-cas d'utilisation est
inclut dans plusieurs UC. Si ce n'est pas le cas, il est généralement englobé dans l'UC.
=====================================================================


==== Pour construire un UC (de manière générale)

. identifier les acteurs
. identifier les cas d'utilisation
. structurer en _packages_
. finaliser les diagrammes de cas d'utilisation (ajouter les relations)

[NOTE]
====
Certains méthodologistes (comme Tim Weilkiens) préconisent de ne pas utiliser les acteurs et les cas d'utilisation
(cf. son http://model-based-systems-engineering.com/[blog])
====

ifndef::book[]

==== Exemples complets (UML) : Gestion des notes

[[ucexp2]]
.Autre exemple de diagramme d'UC
ifdef::book[image::uc2.png[scale=60]]
ifndef::book[image::uc2.png["Exemple de Diagramme d'UC",width="70%"]]

endif::book[]

ifdef::slides[]
:leveloffset: -1
endif::slides[]

[[seq]]
=== _Sequence Diagrams_

ifdef::slides[]
:leveloffset: -2
endif::slides[]

==== Généralités

Il permet de :

* modéliser les interactions entre blocs
* séquencer ces interactions dans le temps
* représenter les échanges de messages
* spécifier les scénarios des cas d'études

Les éléments qui composent ce diagramme sont :

Participants::
	les éléments en interaction (des blocs généralement)
Lignes de vie::
	des lignes verticales qui permettent d'indiquer un départ ou une arrivée d'interaction
Barres d'activation::
	pour matérialiser quand l'élément est actif
Messages::
	ce qui "circule" d'un élément à l'autre (signal, appel de méthode, ...)

//ifdef::slides[==== Généralités (suite)]

//.Exemple de diagramme de séquence
//ifdef::book[image::{acsi}/seq1.png["Diagramme de séquence",scale=40]]
//ifndef::book[image::{acsi}/seq1.png["Diagramme de séquence",width="40%"]]

//.Exemple de diagramme de séquence (2)
//ifdef::book[image::{acsi}/seq2.png["Eléments de notation",scale=40]]
//ifndef::book[image::{acsi}/seq2.png["Eléments de notation",width="40%"]]

[CAUTION]
=====================================================================
Les participants (et leur ligne de vie) représentent des instances de blocs (souvent "anonymes").
=====================================================================

ifndef::book[]

==== Exemple

image::dsexp1.png[]

[[seqexp]]
.Exemple de diagramme de séquence (3)
ifdef::book[image::seq3.png["Exemple de diagramme de séquence",scale=50]]
ifndef::book[image::seq3.png["Exemple de diagramme de séquence",width="60%"]]

endif::book[]

==== Notions avancées

On peut également représenter des instructions itératives et conditionnelles au travers de
*cadres d'interaction* :

* +loop+ (boucle)
* +alt+ (alternative)
* +opt+ (optionel)
* `{par}` (parallèle)
* +region+ (région critique - un seul _thread_ à la fois)

ifdef::slides[==== Notions avancées (suite)]

[[fowler]]
.Exemple d' algorithme...
ifdef::book[image::fowl1.png["Un algorithme",scale=40]]
ifndef::book[image::fowl1.png["Un algorithme",width="30%"]]

ifdef::slides[==== Notions avancées (suite)]

.Et le diagramme correpondant
ifdef::book[image::fowl2.png["Sa modélisation",scale=60]]
ifndef::book[image::fowl2.png["Sa modélisation",width="60%"]]

==== Exemple de conceptions

Le diagramme de séquences est un diagramme utile pour montrer les "responsabilités" de
certains objets par rapport aux autres. Dans un code logiciel, on peut y déceler plus
facilement que tel objet est plus chargé que d'autres. Les deux diagrammes suivants
(tirés de <<Fowler2004>>) montrent deux conceptions différentes possibles pour l'implémentation d'une même
fonctionnalité. On mesure visuellement assez bien la différence entre la version "centralisée"
(<<fowler1>>) et la version "objet" (<<fowler2>>).

ifdef::slides[==== Exemple de conceptions (suite)]

[[fowler1]]
.Conception "centralisée"
ifdef::book[image::fowl3.png[scale=60]]
ifndef::book[image::fowl3.png["Conception 'centralisée'",width="60%"]]

ifdef::slides[==== Exemple de conceptions (suite)]

[[fowler2]]
.Conception "objet"
ifdef::book[image::fowl4.png[scale=60]]
ifndef::book[image::fowl4.png["Conception 'objet'",width="60%"]]


[NOTE]
====
On utilise le diagramme de séquence pour représenter des algorithmes et des séquencements temporels. Lorsque le comportement se rapproche plus d'un flot, on utilise le diagramme d'activité (cf. section sur le <<act>>).
====

==== Lien entre UC, DSS et DS

La décomposition hiérarchique permet une description "_TOP-DOWN_" du système à réaliser.

On fait un Diagramme de Séquence Système pour chaque cas d'utilisation (issu du Diagramme d’UC) pour déterminer les échanges d’informations entre l’acteur et le système.

Ensuite on fait un Diagramme de Séquence (DS) pour décrire comment les blocs composant le système (issus du `{bdd}`) collaborent pour réaliser le traitement demandé.

ifdef::slides[==== Lien entre UC, DSS et DS (suite)]

[[exp1-uc]]
.Diagramme d'UC
ifdef::book[image::ucexp1.png[scale=50]]
ifndef::book[image::ucexp1.png["Diagramme d'UC",width="30%"]]

ifdef::slides[==== Lien entre UC, DSS et DS (suite)]

[[exp1-dss]]
.Le DSS correspondant
ifdef::book[image::dssexp1.png[scale=50]]
ifndef::book[image::dssexp1.png["Le DSS correspondant",width="50%"]]

ifdef::slides[==== Lien entre UC, DSS et DS (suite)]

[[exp1-ds]]
.Le DS correspondant
ifdef::book[image::dsexp1.png[scale=50]]
ifndef::book[image::dsexp1.png["Le DS correspondant",width="70%"]]

ifdef::slides[]
:leveloffset: -1
endif::slides[]

[[stm]]
=== Diagramme d'états

{SysML} a repris le concept, déjà connu en {uml}, de machine à états  (_State Machines_).
Ce diagramme représente les différents *états* possibles d’un bloc particulier, et comment ce bloc réagit à des événements en fonction de son état courant (en passant éventuellement dans un nouvel état).
Cette réaction (nommée *transition*) possède un événement déclencheur, une condition (garde), un effet et un état cible.

Le diagramme d’états comprend également deux *pseudo-états* :

- l’état initial du diagramme d’états correspond à la création d’une instance ;
- l’état final du diagramme d’états correspond à la destruction de l’instance.

ifdef::slides[==== Diagramme d'états (suite)]

.Un exemple de diagramme d'état (R,UK)
ifdef::book[image::stm1.png[scale=50]]
ifndef::book[image::stm1.png["Un diagramme d'état",width="70%"]]

ifdef::slides[==== Diagramme d'états (suite)]

Lorsqu'un état nécessite lui-même plus de détails, on créé un *état composite* (aussi appelé super-état)
qui est lui-même une machine à état. On peut ainsi factoriser des transitions déclenchées par le même événement (et amenant vers le même état cible), tout en spécifiant des transitions particulières entre les sous-états.
Il est également possible d'attacher un diagramme d'état (composite) à un état pour garder une représentation hiérarchique.

Un diagramme d'état peut représenter des régions concurrentes (dont les activités peuvent évoluer en parallèle), graphiquement représentées par des zones séparées par des traits pointillés. Chaque région contient ses propres états et transitions.

Il existe encore d'autres concepts avancés que nous ne présenterons pas dans cette introduction car ils sont beaucoup moins utilisés (+entry+, +exit+, +transition interne+, etc.).

[[act]]
=== Diagrammes d'activité

Les diagrammes d'activité (_Activity Diagrams_) est utilisé pour représenter les flots de données et de contrôle entre les actions. Il est utilisé pour raffiner en général un cas d'utilisation.
Il est utilisé pour l’expression de la logique de contrôle et d’entrées/sorties. Le diagramme d’activité sert non seulement à préciser la séquence d’actions à réaliser, mais aussi ce qui est produit, consommé ou transformé au cours de l’exécution de cette activité.

.Exemple de diagramme d'activité (tiré de <<SeeBook2012>>)
ifdef::book[image::act-pcmk1.png[scale=40]]
ifndef::book[image::act-pcmk1.png[width="70%"]]

ifdef::slides[==== Diagramme d'activités (suite)]

Les éléments de base du diagramme d’activité sont :

- les actions,
- les flots de contrôle entre actions,
- les décisions (branchements conditionnels),
- un début et une ou plusieurs fins possibles.

=== Actions

Les actions sont les unités fondamentales pour spécifier les comportements en {SysML}.
Une action représente un traitement ou une transformation.
Les actions sont contenues dans les activités, qui leur servent alors de contexte.

=== Flots

Un *flot de contrôle* permet le contrôle de l’exécution des noeuds d'activités. Les flots de contrôle sont des flèches reliant deux noeuds (actions, décisions, etc.).

Le diagramme d’activité permet également d’utiliser des *flots d’objets* (reliant une action et un objet consommé ou produit). Les _object flow_, associés aux broches d'entrée/sortie (_input/output pin_) permettent alors de décrire les transformations sur les objets manipulés.

.Un exemple de flot continu (UK)
ifdef::book[image::act-flow-continuous.png[scale=50]]
ifndef::book[image::act-flow-continuous.png["Un flot continu",width="30%"]]

Pour permettre la modélisation des *flots continus*, {SysML} ajoute à {UML} la possibilité de caractériser la nature du débit qui circule sur le flot : continu (par exemple, courant électrique, fluide, etc.) ou discret (par exemple, évenements, requêtes, etc.).
On utilise pour cela des stéréotypes : `+<<continuous>>+` et `+<<discrete>>+`. Par défaut, un flot est supposé discret.


.Définition : _FlowProperty_ (OMG SysML v1.3, p. 63)
[icon="./images/icons/sysml.jpeg"]
[NOTE]
====
_A FlowProperty signifies a single flow element to/from a block. A flow property has the same notation as a Property only with a direction prefix (in | out | inout). Flow properties are listed in a compartment labeled flow properties._
====


=== Décision

Une décision est un noeud de contrôle représentant un choix dynamique entre plusieurs conditions (mutuellement exclusives).
Elle est représentée par un losange qui possède un arc entrant et plusieurs arcs sortants. Il existe plusieurs noeuds de contrôle (cf. <<Control>>) :

_fork_::
Un _fork_ est un noeud de contrôle représentant un débranchement parallèle. Il est représenté par une barre (horizontale ou verticale) qui possède un arc entrant et plusieurs arcs sortants. Le _fork_ duplique le "jeton" entrant sur chaque flot sortant. Les jetons sur les arcs sortants sont indépendants et concurrents.
_join_::
Un _join_ est un noeud de contrôle structuré représentant une synchronisation entre actions (rendez-vous). Il est représenté par une barre (horizontale ou verticale) qui possède un arc sortant et plusieurs arcs entrants. Le _join_ ne produit son jeton de sortie que lorsqu’un jeton est disponible sur chaque flot entrant (d'où la synchronisation).
_flow final_::
Contrairement à la fin d’activité qui est globale à l’activité, la fin de flot est locale au flot concerné et n’a pas d’effet sur l’activité englobante.
_merge_::
La fusion est l’inverse de la décision : le même symbole du losange, mais cette fois-ci avec plusieurs flots entrants et un seul sortant.

[[Control]]
.Les différents contrôles de flow SysML
ifdef::book[image::flow-ctrl.png[scale=40]]
ifndef::book[image::flow-ctrl.png[width="20%"]]

ifdef::slides[]

[NOTE]
====
Pour se rapprocher de {sart}, la norme prévoit la possibilité d'utiliser les pointillés pour les flux de contrôle.

.Définition : _ControlFlow_ (OMG SysML v1.3, p. 102)
[icon="./images/icons/sysml.jpeg"]
[NOTE]
====
Control flow may be notated with a dashed line and stick arrowhead...
====
====

endif::slides[]

=== Réutilisation

Les activités peuvent être réutilisées à travers des actions d’appel (_callBehaviorAction_).
L’action d’appel est représentée graphiquement par une fourche à droite de la boîte d’action, ainsi que par la chaîne : `nom d’action : nom d’activité`. {SysML} propose encore bien d’autres concepts et notations, comme la région interruptible, la région d’expansion ou encore les flots de type _stream_ qui sortent du cadre de ce livre d'introduction.

.Exemple de _callBehaviorAction_ (UK)
ifdef::book[image::act-call.png[scale=50]]
ifndef::book[image::act-call.png[width="20%"]]


=== {resume}

Il existe de nombreux diagrammes pour exprimer les comportements. Ces modèles sont importants dans la mesure où ils peuvent servir à valider le futur système vis-à-vis de ces comportements exprimés. Ils ne sont donc véritablement utiles que lorsqu'ils sont couplés à des outils de simulation ou d'analyse (cf. <<Analyse>>).

.Place du Comportement
ifdef::book[[cols="h,4*",options="header"]]
ifndef::book[[cols="h,4*",options="header",width="50%"]]
|======================
|					| {Requirements} 	| {Structure}	| [red]*{Behavior}* 	| {Crosscutting}
| {organisation}	|					|        		| `{pkg}`				|
| {analysis}		|					|        		| `{uc}` `{seq}`				|
| {design}			|					|        		| `{dss}` `{seq}` `{act}`		|
| {implementation}	|					|        		| `{stm}`			|
|======================

=== {revisions}

ifndef::slides[]

. Comment, pour exprimer un comportement, savoir si j'ai besoin d'un diagramme de séquence plutôt qu'un diagramme d'activité ou encore d'une machine à état ?

endif::slides[]

ifdef::slides[]

[icon="images/icons/tuxteacher.png"]
[NOTE]
====
. Comment, pour exprimer un comportement, savoir si j'ai besoin d'un diagramme de séquence plutôt qu'un diagramme d'activité ou encore d'une machine à état ?
====
endif::slides[]

=== Exercices

ifdef::slides[]
:leveloffset: -2
endif::slides[]

==== Diagramme des cas d'utilisation

Placez dans un diagrammes des cas d'utilisation les différents acteurs et cas correspondant à l'étude de cas suivante
(en indiquant les relations) :

[quote]
____________________________________________________________________
Pour faciliter sa gestion, un entrepôt de stockage envisage de concevoir un système permettant d'allouer automatiquement un emplacement de stockage pour chaque produit du chargement des camions qui convoient le stock à entreposer.
Lors de l’arrivée d’un camion, un employé doit saisir dans le système les caractéristiques de chaque article ; le système produit alors une liste où figure un emplacement pour chaque article. Lors du chargement d’un camion les caractéristiques des articles à charger dans un camion sont saisies par un employé afin d’indiquer au système de libérer les emplacements correspondant.
____________________________________________________________________

ifdef::correction[]

.Réponse
ifdef::book[image::{acsi}/../partiels/iut-S3-2012-stock-uc.png[scale=60]]
ifndef::book[image::{acsi}/../partiels/iut-S3-2012-stock-uc.png[width="60%"]]

endif::correction[]

ifdef::slides[]
:leveloffset: 0
endif::slides[]

//---------------------------------------------------------------------------------
[[transvers]]
== Les aspects transversaux
//---------------------------------------------------------------------------------

ifndef::book[]

.Aspects transversaux
[cols="h,4*",options="header",width="50%"]
|======================
|					| {Requirements} 	| {Structure}	| {Behavior} 	| [red]*{Crosscutting}*
| {organisation}	|					|        		|				|
| {analysis}		|					|        		|				|
| {design}			|					|        		|				|
| {implementation}	|					|        		|				|
|======================
endif::book[]

ifdef::slides[]
:leveloffset: -1
endif::slides[]

=== Fondements

On abordera ici les aspects transversaux comme :

- la traçabilité des exigences indexterm:[Traçabilité]
- les mécanismes d'allocation
- le diagramme paramétrique

=== Traçabilité des exigences

Nous avons vu déjà un certain nombre de mécanismes {sysml} qui permettent de tracer les exigences.
Nous les regroupons ici dans une matrice spécifique (qui se lit dans le sens des relations, par exemple un élément de structure comme un bloc `+<<satisfy>>+` une exigence).

.Traçabilité
ifdef::book[[cols="h,3*",options="header"]]
ifndef::book[[cols="h,3*",options="header",width="50%"]]
|======================
|					| {Requirements} 							| {Structure}	| {Behavior}
| {Requirements}	| `+<<deriveRqt>>+`, `+<<refine>>+`, `+<<copy>>+` |    			|
| {Structure}		| `+<<allocate>>+`, `+<<satisfy>>+`				| 				| `+<<allocate>>+`
| {Behavior}		| `+<<refine>>+`								|				|
|======================

Comme indiqué dans le tableau ci-dessus, en général, le lien de raffinement est utilisé entre une exigence et un élément comportemental (état, activité, `{uc}`, etc.) tandis que l'allocation concerne principalement les éléments de structures.

XXX Mettre un exemple avec tous ces liens. XXX

=== Mécanismes d'allocation

Un mécanisme nouveau en {sysml} et important pour {lis} est le mécanisme d'*allocation*. Il permet de
préciser quel élément conceptuel (comme un comportement ou une activité) est alloué sur quel élément physique.

Il est possible d'exprimer cette allocation de plusieurs manières.

Parler du `+<<AllocatedTo>>+`, compartiments des blocs et autres annotations.
Parler des zones d'allocation dans les machines à états où les diagrammes d'activités par exemple.
Parler des `+<<allocate>>+`.

=== Diagramme paramétrique

C'est une forme particulière de _Internal Block Definition_ (cf. <<param>>). On y retrouve les contraintes, déjà vues
 (cf. <<contraintes>>), mais cette fois-ci on a la représentation graphique des liens entre les données.

.Exemple de diagramme paramétrique
ifdef::book[image::param.png[scale=50]]
ifndef::book[image::param.png[width="90%"]]

Il est regrettable que ce diagramme soit le moins utilisé (cf. <<enquete>>).

[NOTE]
====
Certaines approchent (cf. <<MeDICIS>>) utilisent des feuilles excel pour traduire les diagrammes paramétriques et contrôler l'impact des changements de valeurs de tel ou tel paramètre.
====

=== {resume}
En résumé l'expression du comportement du système en {sysml} est très similaire à ce qui est fait dans {uml}. On retrouve néanmoins le renforcement des liens entre éléments de modèles par les dépendances précises et les allocations. Un autre élément de renforcement entre éléments de modèles concerne le fait qu'un diagramme comportemental (comme une machine à état) est attachée à un élément bien précis (par exemple un bloc). Ces liens apparaissent entre blocs et machines à état, entre cas d'utilisation et diagrammes de séquence ou d'activité, etc.

=== {revisions}

ifndef::slides[]

. Quelles sont les différences entre `+<<satisfy>>+` et `+<<allocate>>+` ?
. Pourquoi est-il important de relier un _use case_ à au moins un _requirement_ ?
. L'inverse est-il aussi important ?
endif::slides[]

ifdef::slides[]

[icon="images/icons/tuxteacher.png"]
[NOTE]
====
. Quelles sont les différences entre `+<<satisfy>>+` et `+<<allocate>>+` ?
. Pourquoi est-il important de relier un _use case_ à au moins un _requirement_ ?
. L'inverse est-il aussi important ?
====
endif::slides[]

ifdef::correction[]

Éléments de réponses :

. Quelles sont les différences entre `+<<satisfy>>+` et `+<<allocate>>+` ?
La satisfaction concerne une propriété (d'une solution vis à vis d'un problème) quand l'allocation permet de rajouter un information sur qui fait quoi.
. Pourquoi est-il important de relier un _use case_ à au moins un _requirement_ ?
Sinon on peut se demander s'il s'agit vraiment d'une utilisation du système qui nous concerne (une exigence a-t'elle été oubliée?).
. L'inverse est-il aussi important ?
Encore plus je dirais, au sens où une exigence n'est couverte par aucune utilisation du système (cela peut arriver lors d'une exigence non satisfiable!)

endif::correction[]

:leveloffset: 0
